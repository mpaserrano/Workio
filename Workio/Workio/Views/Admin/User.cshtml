@model Workio.Models.User
@inject UserManager<User> UserManager;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var isAdmin = await UserManager.IsInRoleAsync(Model, "Admin");
    var currentCulture = Thread.CurrentThread.CurrentCulture.Name;
}

<link href="~/lib/DataTables/datatables.min.css" rel="stylesheet" />

<style>
    .table-user-profile-picture {
        border-radius: 50%;
        max-width: 40px;
    }

    #UserReports td {
        vertical-align: middle;
    }

    #UserReports td .table-user-profile-picture {
        margin-right: 10px;
    }

    #UserTeams td {
        vertical-align: middle;
    }
</style>
<div class="row">
    <div class="col">
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="d-flex align-items-center">
                        @if (Model.ProfilePicture != null)
                        {
                            <img class="rounded-circle profile-picture-preview" src="~/pfp/@Model.ProfilePicture" alt="Profile Picture" class="pfp" />
                        }
                        else
                        {
                            <img class="rounded-circle profile-picture-preview" src="~/pfp/default.png" alt="Profile Picture" class="rounded-circle pfp" />
                        }
                        <div class="ms-3">
                            <div><p class="fw-bold mb-1">@Model.Name</p></div>
                            <p class="text-muted mb-0">@Model.Email</p>
                        </div>
                        @if(Model.LockoutEnd == null)
                        {
                            <a class="btn btn-danger ms-auto" onclick="addActionToForm('/Admin/BanUser/@Model.Id')">@localizer.Get("Ban")</a>
                        }
                        else
                        {
                            <a class="btn btn-primary ms-auto" onclick="addActionToForm('/Admin/UnbanUser/@Model.Id')">@localizer.Get("Unban")</a>
                        }
                        
                    </div>
                </div>
                <div class="d-flex align-items-center">
                    <div class="ms-3">
                        <div><p class="fw-bold mb-1">@localizer.Get("Status")</p></div>
                        @if(Model.LockoutEnd != null)
                        {
                            <p class="mb-0">@localizer.Get("Suspended")</p>
                        }
                        else
                        {
                            <p class="mb-0">@localizer.Get("Active")</p>
                        }
                    </div>
                </div>
                @if(Model.LockoutEnd == null)
                {
                    <form>
                        <div class="row g-3 align-items-center mb-4 ms-3">
                            <div class="col-4" style="padding-left: 0;">
                                <label for="UserRolesSelect" class="form-label">@localizer.Get("Roles")</label>
                                <select id="UserRolesSelect" class="form-select" aria-label="@localizer.Get("Roles")" disabled="@isAdmin"></select>
                            </div>
                        </div>
                        @if (!isAdmin)
                        {
                            <a class="btn btn-primary ms-3" onclick="changeRole()">@localizer.Get("ChangeRole")</a>
                        }
                    </form>
                }
            </div>
        </div> 
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <h4>@localizer.Get("PreviousReports")</h4>
                </div>
                <table id="PreviousUserReports" class="table">
                    <thead>
                        <tr>
                            <th>
                                @localizer.Get("Reporter")
                            </th>
                            <th>
                                @localizer.Get("Reason")
                            </th>
                            <th>
                                @localizer.Get("Status")
                            </th>
                            <th>
                                @localizer.Get("Date")
                            </th>
                            <th>
                                @localizer.Get("Actions")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <h4>@localizer.Get("Teams")</h4>
                </div>
                <table id="UserTeams" class="table">
                    <thead>
                        <tr>
                            <th>
                                @localizer.Get("TeamName")
                            </th>
                            <th>
                                @localizer.Get("Status")
                            </th>
                            <th>
                                @localizer.Get("NumberOfReports")
                            </th>
                            <th>
                                @localizer.Get("Actions")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
        @if(ViewBag.showEventsReports == true)
        {
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <h4>@localizer.Get("Events")</h4>
                    </div>
                    <table id="UserEvents" class="table">
                        <thead>
                            <tr>
                                <th>
                                    @localizer.Get("EventName")
                                </th>
                                <th>
                                    @localizer.Get("Status")
                                </th>
                                <th>
                                    @localizer.Get("NumberOfReports")
                                </th>
                                <th>
                                    @localizer.Get("Actions")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/DataTables/datatables.min.js"></script>
    <script>
        var localizationUrl = '@currentCulture' == 'pt' ? '//cdn.datatables.net/plug-ins/1.13.4/i18n/pt-PT.json' : ''
        function addRole(roleId) {
            // code to add the role to the user
        }

        function removeRole(roleId) {
            // code to remove the role from the user
        }

        function changeRole(){
            var roleId = $('#UserRolesSelect').val();
            var url = '/Admin/ChangeRole/@Model.Id?roleId=' + roleId;
            addActionToForm(url);
        }

        $(document).ready(function () {
            // Fetch user roles data and populate the dropdown
            $.ajax({
                url: '/Admin/GetUserRoles/@Model.Id',
                type: 'GET',
                success: function(data) {
                    console.log(data.data)
                    var selectBox = $('#UserRolesSelect');
                    selectBox.empty();
                    data = data.data
                    // Add an option for each role
                    for (var i = 0; i < data.length; i++) {
                        console.log(i);
                        var role = data[i];
                        var option = $('<option>').attr('value', role.id).text(role.name);
                        if (role.userHasRole == true) {
                            option.attr('selected', 'selected');
                        }
                        selectBox.append(option);
                    }
                },
                error: function() {
                    // Handle error
                }
            });

            /* Previous reports */
            $('#PreviousUserReports').DataTable({
                language: {
                    url: localizationUrl,
                },
                responsive: true,
                processing: true,
                serverSide: true,
                searching: false,
                ajax: {
                    url: '/Admin/GetUserReports',
                    type: 'GET',
                    data: function (d) {
                        // Add any required parameters to the request.
                        d.searchValue = $('#PreviousUserReports_filter input').val();
                        d.sortColumn = $('#sortColumnSelect').val();
                        d.sortDirection = $('#sortDirectionSelect').val();
                        d.id = '@Model.Id';
                    }
                },
                columns: [
                    { data: null,
                        render: function (data, type, rowData, meta) {
                            if (rowData.profilepicture == null || rowData.profilepicture == "") {
                                return '<a href="/User/Index/' + rowData.reporterId + '"><img class="rounded-circle table-user-profile-picture" src="/pfp/default.png">' + rowData.reporterName + '</a>'
                            }
                            else {
                                return '<a href="/User/Index/' + rowData.reporterId + '"><img class="rounded-circle table-user-profile-picture" src="/pfp/' + rowData.reporterProfilePicture + '"/>' + rowData.reporterName + '</a>'
                            }
                            
                        }
                    },
                    { data: 'reportReason' },
                    { data: null,
                        render: function (data, type, rowData, meta) {
                            if (rowData.reportStatus == 0) {
                                return '<span class="badge rounded-pill badge-danger">' + "@localizer.Get("Rejected")" + '</span>'
                            }
                            if (rowData.reportStatus == 1) {
                                return '<span class="badge rounded-pill badge-warning">' + "@localizer.Get("Pending")" + '</span>'
                            }
                            if (rowData.reportStatus == 2) {
                                return '<span class="badge rounded-pill badge-success">' + "@localizer.Get("Accepted")" + '</span>'
                            }
                        }
                            
                    },
                    { data: 'reportDate' },
                    {
                        data: null,
                        render: function (data, type, rowData, meta) {
                            return '<a href="/AdminReports/DetailsUser/' + rowData.id + '" >@localizer.Get("Details")</a>'
                        }
                    }
                ]
            });

            /* Number of reports by team that user is participating */
            $('#UserTeams').DataTable({
                language: {
                    url: localizationUrl,
                },
                responsive: true,
                processing: true,
                serverSide: true,
                searching: false,
                ajax: {
                    url: '/Admin/GetUserTeamsReports',
                    type: 'GET',
                    data: function (d) {
                        // Add any required parameters to the request.
                        d.searchValue = $('#UserTeams_filter input').val();
                        d.sortColumn = $('#sortColumnSelect').val();
                        d.sortDirection = $('#sortDirectionSelect').val();
                        d.id = '@Model.Id';
                    }
                },
                columns: [
                    { data: null,
                        render: function (data, type, rowData, meta) {
                            return '<a href="/Teams/Details/' + rowData.reportedTeamId + '">' + rowData.reportedTeamName + '</a>'
                            
                        }
                    },
                    { data: null,
                        render: function (data, type, rowData, meta) {
                            if(rowData.banned){
                                return '<span class="badge rounded-pill badge-danger">' + "@localizer.Get("BannedSingularM")" + '</span>'
                            }
                            else{
                                return '<span class="badge rounded-pill badge-success">' + "@localizer.Get("Active")" + '</span>'
                            }
                        }
                            
                    },
                    { data: 'totalReports' },
                    {
                        data: null,
                        render: function (data, type, rowData, meta) {
                            return '<a href="/AdminTeam/Details/' + rowData.reportedTeamId + '" >@localizer.Get("Details")</a>'
                        }
                    }
                ]
            });

            let showEvents = '@ViewBag.showEventsReports';

            if(showEvents == 'True')
            {
                /* Number of reports by event that the user created*/
                $('#UserEvents').DataTable({
                    language: {
                        url: localizationUrl,
                    },
                    responsive: true,
                    processing: true,
                    serverSide: true,
                    searching: false,
                    ajax: {
                        url: '/Admin/GetUserEventsReports',
                        type: 'GET',
                        data: function (d) {
                            // Add any required parameters to the request.
                            d.searchValue = $('#UserEvents_filter input').val();
                            d.sortColumn = $('#sortColumnSelect').val();
                            d.sortDirection = $('#sortDirectionSelect').val();
                            d.id = '@Model.Id';
                        }
                    },
                    columns: [
                        { data: null,
                            render: function (data, type, rowData, meta) {
                                return '<a href="/Events/Details/' + rowData.reportedEventId + '">' + rowData.reportedEventName + '</a>'
                            
                            }
                        },
                        { data: null,
                            render: function (data, type, rowData, meta) {
                                if(rowData.banned){
                                    return '<span class="badge rounded-pill badge-danger">' + "@localizer.Get("BannedSingularM")" + '</span>'
                                }
                                else{
                                    return '<span class="badge rounded-pill badge-success">' + "@localizer.Get("Active")" + '</span>'
                                }
                            }
                            
                        },
                        { data: 'totalReports' },
                        {
                            data: null,
                            render: function (data, type, rowData, meta) {
                                return '<a href="/AdminEvent/Details/' + rowData.reportedEventId + '" >@localizer.Get("Details")</a>'
                            }
                        }
                    ]
                });
            }
        });
    </script>
}