@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = @localizer.Get("Notifications");
}

<div class="row">
    <div class="col-10">
        <h1>@ViewData["Title"]</h1>
    </div>
</div>

<div class="row">
    <div class="col-2">
        <!-- Show All messages -->
        <div class="form-check">
          <input class="form-check-input" type="radio" name="notificationFilter" value="all" id="showAll" onchange="showNotifications()" checked/>
          <label class="form-check-label" for="showAll"> @localizer.Get("ShowAllF") </label>
        </div>

        <!-- Show all read messages -->
        <div class="form-check">
          <input class="form-check-input" type="radio" name="notificationFilter" value="true" onchange="showNotifications(true)" id="showRead"/>
          <label class="form-check-label" for="showRead"> @localizer.Get("ShowReadF") </label>
        </div>

        <!-- Show all unread messages -->
        <div class="form-check">
          <input class="form-check-input" type="radio" name="notificationFilter" value="false" onchange="showNotifications(false)" id="showUnread"/>
          <label class="form-check-label" for="showUnread"> @localizer.Get("ShowUnreadF") </label>
        </div>
    </div>
    <div class="col-10">
        <div style="display: none;" id="loading" class="loading-list-container">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <ul class="list-group list-group-light" id="notificationsList">
        </ul>
    </div>
</div>

@section Scripts {
    <script src="~/js/components/notification_card.js"></script>

    <script>
        var translations = {
            unreadStatus: '@localizer.Get("MarkAsRead")',
            readStatus: '@localizer.Get("MarkAsUnread")'
        }
        function loadNotificationsList(status, callback) {
            const xhttp = new XMLHttpRequest();
            xhttp.onload = function() {
                var response = this.responseText;
                var jsonData = JSON.parse(response);

                document.getElementById("notificationsList").innerHTML = "";

                console.log(jsonData);

                //Executar codigo com o json
                const notificationsList = jsonData.map(noti => createNotificationHTML({
                    id: noti.id, 
                    text: noti.text, 
                    url: noti.url, 
                    isRead: noti.isRead, 
                    seeMoreText: '@localizer.Get("SeeMore")',
                    newText: '@localizer.Get("NewF")',
                    statusText: noti.isRead ? translations.readStatus : translations.unreadStatus,
                    translations: translations
                }));

                notificationsList.forEach(noti => {
                  document.getElementById("notificationsList").innerHTML += noti;
                });

                callback();
            }

            if(status != undefined)
                xhttp.open("GET", "/Notifications/GetNotifications?status=" + status, true);
            else
                xhttp.open("GET", "/Notifications/GetNotifications", true);

            xhttp.send();
        }

        function showNotifications(status) {
            //Mostrar o load animation
            document.getElementById("loading").style.display = "block";

            loadNotificationsList(status, function() {
                //Quando acabar o ajax e o carregar os dados tira o load
                document.getElementById("loading").style.display = "none";
            });
        }

        $(document).ready(function () {
           // your page initialization code here
           // the DOM will be available here
           showNotifications();
        });
    </script>
}